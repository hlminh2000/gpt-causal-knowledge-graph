import Head from "next/head";
import dynamic from "next/dynamic";
import styles from "@/styles/Home.module.css";
import { Configuration } from "openai";
import { v4 as uuidV4 } from "uuid";
import {
  Alert,
  Box,
  Button,
  Container,
  FormLabel,
  Grid,
  Input,
  Textarea,
} from "@mui/joy";
import React, { useMemo, useState } from "react";
import { KnowledgeGraph, newKnowledgeGraphModel } from "@/lib/knowledgeGraph";

const GraphCanvas = dynamic(
  () => import("reagraph").then((reagraph) => reagraph.GraphCanvas),
  {
    ssr: false,
    loading: () => <div>loading...</div>,
  }
);

const ReactJson = dynamic(() => import("react-json-view"), {
  ssr: false,
  loading: () => <div>loading...</div>,
});

export default function Home() {
  const [openAiApiKey, setOpenAiApiKey] = useState<string>();
  const [storyText, setStoryText] = useState<string>();
  const [initialPrompt, setInitialPrompt] = useState<string>();
  const [knowledgeGraph, setKnowledgeGraph] = useState<
    KnowledgeGraph | undefined
  >(undefined);
  const [loading, setLoading] = useState(false);
  const knowledgeGraphModel = useMemo(
    () =>
      newKnowledgeGraphModel({
        openAiConfiguration: new Configuration({
          apiKey: openAiApiKey,
        }),
      }),
    [openAiApiKey]
  );

  const [alerts, setAlerts] = useState<
    {
      id: string;
      type?: "neutral" | "danger" | "info" | "success" | "warning";
      message: string;
    }[]
  >([]);

  const addAlert = (alert: (typeof alerts)[0]) => {
    setAlerts([...alerts, alert]);
    setTimeout(() => {
      setAlerts((alerts) => alerts.filter((s) => s.id !== alert.id));
    }, 10000);
  };

  const onSubmit = async () => {
    if (storyText && initialPrompt) {
      setLoading(true);
      setKnowledgeGraph(undefined);
      try {
        setKnowledgeGraph(
          await knowledgeGraphModel.createKnowledgeGraph({
            storyText,
            initialPrompt,
            onUpdate: (graph) => setKnowledgeGraph(graph),
          })
        );
      } catch (err) {
        addAlert({
          id: uuidV4(),
          message: (err as Error).message,
          type: "danger",
        });
      }
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Container className={styles.center}>
          <Grid container xs={12} spacing={2}>
            <Grid xs={12}>
              <FormLabel>OpenAI API Key</FormLabel>
              <Input
                size="sm"
                placeholder="sk-xxxxxxxx"
                type="password"
                value={openAiApiKey}
                onChange={(e) => setOpenAiApiKey(e.target.value)}
              />
            </Grid>
            <Grid xs={12}>
              <FormLabel>The story</FormLabel>
              <Textarea
                placeholder="Once upon a time, there was a beautiful and kind-hearted girl named Cinderella. She lived with her cruel stepmother and stepsisters who treated her as a servant, making her do all the household chores and forcing her to sleep in a dirty and cold room by the fireplace..."
                value={storyText}
                onChange={(e) => setStoryText(e.target.value)}
                size="sm"
                minRows={5}
                sx={{ width: "100%" }}
              />
            </Grid>
            <Grid xs={12}>
              <FormLabel>Initial prompt</FormLabel>
              <Textarea
                placeholder="What is the ending of the story?"
                value={initialPrompt}
                onChange={(e) => setInitialPrompt(e.target.value)}
                size="sm"
                sx={{ width: "100%" }}
              />
            </Grid>
            <Grid xs={12}>
              <Button
                onClick={onSubmit}
                disabled={
                  loading || !storyText || !openAiApiKey || !initialPrompt
                }
              >
                {" "}
                Create{" "}
              </Button>
            </Grid>
            <Grid xs={12} container spacing={1}>
              {alerts.map((alert) => (
                <Grid xs={12}>
                  <Alert key={alert.id} color={alert.type} variant="solid">
                    {alert.message}
                  </Alert>
                </Grid>
              ))}
            </Grid>
            <Grid xs={12} container spacing={1}>
              <Grid xs={12} md={6}>
                <Box position={"relative"} height={500}>
                  <GraphCanvas
                    nodes={
                      knowledgeGraph?.nodes.map((node) => ({
                        id: node.id,
                        label: node.text,
                      })) || []
                    }
                    edges={
                      knowledgeGraph?.edges.map((edge) => ({
                        id: `${edge.cause}->${edge.effect}`,
                        source: edge.cause,
                        target: edge.effect,
                        label: "caused",
                      })) || []
                    }
                  />
                </Box>
              </Grid>
              <Grid xs={12} md={6}>
                <Box position={"relative"} height={500} overflow={"scroll"}>
                  <ReactJson src={knowledgeGraph as object} />
                </Box>
              </Grid>
            </Grid>
          </Grid>
        </Container>
      </main>
    </>
  );
}
